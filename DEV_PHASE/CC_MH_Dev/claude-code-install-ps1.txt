# Claude Code Dev Stack - Windows PowerShell Installation Script
# This script installs the 28 AI agents for Claude Code on Windows

Write-Host "ü§ñ Claude Code Agent System - Windows Installation" -ForegroundColor Cyan
Write-Host "Installing 28 specialized AI agents..." -ForegroundColor Yellow

# Set installation directory
$CLAUDE_DIR = "$env:USERPROFILE\.claude-code"
$AGENTS_DIR = "$CLAUDE_DIR\agents"
$COMMANDS_DIR = "$CLAUDE_DIR\commands"
$TEMP_DIR = "$env:TEMP\claude-code-temp"

# Create directories
Write-Host "`nüìÅ Creating directories..." -ForegroundColor Green
New-Item -ItemType Directory -Force -Path $CLAUDE_DIR | Out-Null
New-Item -ItemType Directory -Force -Path $AGENTS_DIR | Out-Null
New-Item -ItemType Directory -Force -Path $COMMANDS_DIR | Out-Null
New-Item -ItemType Directory -Force -Path $TEMP_DIR | Out-Null

# GitHub repository URL
$REPO_URL = "https://github.com/KrypticGadget/Claude_Code_Dev_Stack"
$RAW_URL = "https://raw.githubusercontent.com/KrypticGadget/Claude_Code_Dev_Stack/main"

try {
    # Download agent configurations
    Write-Host "`nüì• Downloading agent configurations..." -ForegroundColor Green
    
    # List of agent files to download
    $agentFiles = @(
        "ai-architect.md",
        "api-gateway-specialist.md",
        "backend-engineer.md",
        "business-analyst.md",
        "cloud-infrastructure-specialist.md",
        "code-reviewer.md",
        "database-architect.md",
        "devops-automation-specialist.md",
        "documentation-specialist.md",
        "frontend-architect.md",
        "integration-specialist.md",
        "iteration-specialist.md",
        "performance-optimization-specialist.md",
        "pmo-coordinator.md",
        "product-manager.md",
        "project-initialization-specialist.md",
        "quality-assurance-lead.md",
        "requirements-analyst.md",
        "scrum-master.md",
        "security-architect.md",
        "solution-architect.md",
        "strategic-advisor.md",
        "system-architect.md",
        "technical-feasibility-analyst.md",
        "technical-writer.md",
        "testing-engineer.md",
        "ui-ux-designer.md"
    )
    
    $totalFiles = $agentFiles.Count
    $currentFile = 0
    
    foreach ($file in $agentFiles) {
        $currentFile++
        $progress = [math]::Round(($currentFile / $totalFiles) * 100)
        Write-Progress -Activity "Downloading agents" -Status "$file" -PercentComplete $progress
        
        $url = "$RAW_URL/Config_Files/$file"
        $destination = Join-Path $AGENTS_DIR $file
        
        try {
            Invoke-WebRequest -Uri $url -OutFile $destination -UseBasicParsing
        } catch {
            Write-Host "‚ö†Ô∏è  Failed to download $file" -ForegroundColor Yellow
        }
    }
    
    Write-Progress -Activity "Downloading agents" -Completed
    
    # Download master prompts
    Write-Host "`nüì• Downloading master prompts..." -ForegroundColor Green
    $PROMPTS_DIR = "$CLAUDE_DIR\master-prompts"
    New-Item -ItemType Directory -Force -Path $PROMPTS_DIR | Out-Null
    
    $promptFiles = @(
        "PROJECT-INITIALIZATION.md",
        "DEVELOPMENT-WORKFLOWS.md",
        "OPTIMIZATION-TASKS.md",
        "TROUBLESHOOTING.md"
    )
    
    foreach ($file in $promptFiles) {
        $url = "$RAW_URL/master-prompts/$file"
        $destination = Join-Path $PROMPTS_DIR $file
        
        try {
            Invoke-WebRequest -Uri $url -OutFile $destination -UseBasicParsing
            Write-Host "  ‚úì Downloaded $file" -ForegroundColor Green
        } catch {
            Write-Host "  ‚ö†Ô∏è  Failed to download $file" -ForegroundColor Yellow
        }
    }
    
    # Create configuration file for Claude Code
    Write-Host "`n‚öôÔ∏è  Creating Claude Code configuration..." -ForegroundColor Green
    $configContent = @"
# Claude Code Agent System Configuration
# Generated by Windows PowerShell installer

agents_directory=$AGENTS_DIR
commands_directory=$COMMANDS_DIR
prompts_directory=$PROMPTS_DIR

# Agent aliases for quick access
[aliases]
architect=ai-architect
backend=backend-engineer
frontend=frontend-architect
database=database-architect
devops=devops-automation-specialist
security=security-architect
qa=quality-assurance-lead
docs=documentation-specialist
"@
    
    $configContent | Out-File -FilePath "$CLAUDE_DIR\config.ini" -Encoding UTF8
    
    # Create a quick reference file
    Write-Host "`nüìã Creating quick reference..." -ForegroundColor Green
    $quickRef = @"
ü§ñ Claude Code Agent System - Quick Reference

üìÅ Installation Locations:
- Agents: $AGENTS_DIR
- Commands: $COMMANDS_DIR
- Prompts: $PROMPTS_DIR

üöÄ Quick Start:
1. Set your API key: claude-code set-key
2. Start a project: claude-code "Create a [your project idea]"
3. Use agents: claude-code --agent backend "Design a REST API"

üìã Available Agents:
$(($agentFiles | ForEach-Object { "- " + ($_ -replace '\.md$', '') }) -join "`n")

üí° Pro Tips:
- Use specific agents for targeted tasks
- Combine multiple agents for complex projects
- Check $PROMPTS_DIR for templates

üìö Documentation:
https://github.com/KrypticGadget/Claude_Code_Dev_Stack
"@
    
    $quickRef | Out-File -FilePath "$CLAUDE_DIR\QUICK_REFERENCE.txt" -Encoding UTF8
    
    Write-Host "`n‚úÖ Installation complete!" -ForegroundColor Green
    Write-Host "`nüìç Installed to: $CLAUDE_DIR" -ForegroundColor Cyan
    Write-Host "üìÑ Quick reference: $CLAUDE_DIR\QUICK_REFERENCE.txt" -ForegroundColor Cyan
    
    # Check if claude-code is in PATH
    Write-Host "`nüîç Checking Claude Code installation..." -ForegroundColor Yellow
    try {
        $claudeVersion = & claude-code --version 2>$null
        Write-Host "‚úÖ Claude Code is installed: $claudeVersion" -ForegroundColor Green
    } catch {
        Write-Host "‚ö†Ô∏è  Claude Code not found in PATH. Make sure to run:" -ForegroundColor Yellow
        Write-Host "   npm install -g @anthropic-ai/claude-code" -ForegroundColor White
    }
    
} catch {
    Write-Host "`n‚ùå Installation failed: $_" -ForegroundColor Red
    Write-Host "Please check your internet connection and try again." -ForegroundColor Yellow
}

Write-Host "`nüéâ Ready to use! Try:" -ForegroundColor Green
Write-Host '   claude-code "Create a full-stack web application"' -ForegroundColor White
Write-Host "   or check $CLAUDE_DIR\QUICK_REFERENCE.txt" -ForegroundColor White