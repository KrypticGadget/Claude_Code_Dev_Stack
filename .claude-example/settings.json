{
  "hooks": {
    "PreToolUse": [
      {
        "matcher": "Task",
        "hooks": [
          {
            "type": "command",
            "command": "$HOME/.claude/hooks/audio_player.py",
            "timeout": 3000
          }
        ]
      },
      {
        "matcher": "Write|Edit|MultiEdit|ExitPlanMode",
        "hooks": [
          {
            "type": "command",
            "command": "$HOME/.claude/hooks/audio_player.py",
            "timeout": 3000
          }
        ]
      },
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "$HOME/.claude/hooks/venv_enforcer.py",
            "timeout": 3
          },
          {
            "type": "command",
            "command": "$HOME/.claude/hooks/audio_player.py",
            "timeout": 3000
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Task",
        "hooks": [
          {
            "type": "command",
            "command": "$HOME/.claude/hooks/model_tracker.py",
            "timeout": 3
          },
          {
            "type": "command",
            "command": "$HOME/.claude/hooks/audio_player.py",
            "timeout": 3000
          }
        ]
      },
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "$HOME/.claude/hooks/audio_player.py",
            "timeout": 3000
          }
        ]
      },
      {
        "matcher": "ExitPlanMode",
        "hooks": [
          {
            "type": "command",
            "command": "$HOME/.claude/hooks/planning_trigger.py",
            "timeout": 3
          }
        ]
      }
    ],
    "UserPromptSubmit": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$HOME/.claude/hooks/smart_orchestrator.py",
            "timeout": 5
          },
          {
            "type": "command",
            "command": "$HOME/.claude/hooks/master_orchestrator.py",
            "timeout": 5
          },
          {
            "type": "command",
            "command": "$HOME/.claude/hooks/agent_mention_parser.py",
            "timeout": 3
          },
          {
            "type": "command",
            "command": "$HOME/.claude/hooks/slash_command_router.py",
            "timeout": 3
          },
          {
            "type": "command",
            "command": "$HOME/.claude/hooks/context_manager.py",
            "timeout": 2
          },
          {
            "type": "command",
            "command": "$HOME/.claude/hooks/parallel_execution_engine.py",
            "timeout": 3
          }
        ]
      }
    ],
    "SessionStart": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$HOME/.claude/hooks/status_line_manager.py",
            "timeout": 2
          },
          {
            "type": "command",
            "command": "$HOME/.claude/hooks/session_loader.py",
            "timeout": 10
          },
          {
            "type": "command",
            "command": "$HOME/.claude/hooks/audio_player.py",
            "timeout": 3000
          }
        ]
      }
    ],
    "Stop": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$HOME/.claude/hooks/session_saver.py",
            "timeout": 5
          },
          {
            "type": "command",
            "command": "$HOME/.claude/hooks/audio_player.py",
            "timeout": 3000
          }
        ]
      }
    ],
    "SubagentStop": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "$HOME/.claude/hooks/model_tracker.py",
            "timeout": 3
          }
        ]
      }
    ]
  },
  "agentSystem": {
    "enabled": true,
    "orchestrator": "master-orchestrator",
    "agents": [
      "master-orchestrator",
      "prompt-engineer",
      "business-analyst",
      "technical-cto",
      "ceo-strategy",
      "financial-analyst",
      "project-manager",
      "technical-specifications",
      "business-tech-alignment",
      "technical-documentation",
      "api-integration-specialist",
      "frontend-architecture",
      "frontend-mockup",
      "production-frontend",
      "backend-services",
      "database-architecture",
      "middleware-specialist",
      "testing-automation",
      "development-prompt",
      "script-automation",
      "integration-setup",
      "security-architecture",
      "performance-optimization",
      "devops-engineering",
      "quality-assurance",
      "mobile-development",
      "ui-ux-design",
      "usage-guide-agent"
    ]
  },
  "slashCommands": {
    "enabled": true,
    "commands": {
      "/new-project": "Start new project with full orchestration",
      "/resume-project": "Continue existing project",
      "/business-analysis": "Comprehensive business analysis",
      "/technical-feasibility": "Technical viability assessment",
      "/architecture-design": "System architecture design",
      "/database-design": "Database schema design",
      "/api-design": "API endpoint design",
      "/frontend-mockup": "Create HTML/CSS mockup",
      "/backend-implementation": "Implement backend services",
      "/full-stack-app": "Build complete application",
      "/test-suite": "Generate test suite",
      "/code-review": "Perform code review",
      "/deployment-setup": "Create deployment config",
      "/docker-setup": "Docker configuration",
      "/documentation": "Generate documentation",
      "/prompt-enhance": "Improve prompts",
      "/security-audit": "Security analysis",
      "/performance-optimization": "Performance tuning",
      "/auto-enhance": "Auto-enhance prompt then orchestrate",
      "/quick-app": "Quick app with enhancement",
      "/smart-build": "Smart build with best practices",
      "/mcp-search": "Web search via MCP",
      "/mcp-obsidian": "Obsidian note management",
      "/mcp-playwright": "Browser automation via Playwright",
      "/mcp-status": "Check MCP service status",
      "/orchestrate-demo": "Full agent orchestration demonstration",
      "/mobile-tunnel": "Start mobile tunnel access",
      "/mobile-dashboard": "Launch mobile dashboard",
      "/tunnel-status": "Check tunnel connectivity status",
      "/tunnel-secure": "Secure tunnel management",
      "/mobile-notifications": "Configure mobile push notifications",
      "/samsung-edge-optimize": "Samsung Galaxy S25 Edge optimizations"
    }
  },
  "mcpIntegration": {
    "playwright": {
      "status": "active",
      "capabilities": ["browser-automation", "testing", "scraping", "visual-testing"]
    },
    "obsidian": {
      "status": "active",
      "capabilities": ["note-management", "documentation", "knowledge-base", "vault-search"]
    },
    "web-search": {
      "status": "active",
      "capabilities": ["web-search", "research", "information-gathering", "competitive-analysis"]
    },
    "github": {
      "status": "active",
      "capabilities": ["repository-management", "issue-tracking", "pull-requests", "code-review", "ci-cd"]
    }
  },
  "logging": {
    "enabled": true,
    "level": "info",
    "path": "$HOME/.claude/logs/",
    "rotation": "daily",
    "maxFiles": 7
  },
  "optimization": {
    "modelSelection": {
      "enabled": true,
      "strategy": "cost-optimized",
      "rules": {
        "complex-tasks": "opus",
        "simple-tasks": "haiku",
        "default": "opus"
      }
    },
    "parallelExecution": true,
    "caching": {
      "enabled": true,
      "ttl": 3600
    }
  },
  "version": "3.0+",
  "v3Features": {
    "statusLine": {
      "enabled": true,
      "updateInterval": 100,
      "showInPrompt": true,
      "components": ["model", "git", "phase", "agents", "tokens", "health"]
    },
    "contextManager": {
      "enabled": true,
      "autoHandoff": true,
      "tokenWarning": 0.8,
      "tokenCritical": 0.9,
      "depthWarning": 15,
      "depthCritical": 20
    },
    "smartOrchestrator": {
      "enabled": true,
      "contextAware": true,
      "parallelExecution": true,
      "learningEnabled": true
    },
    "audioV3": {
      "enabled": true,
      "totalFiles": 96,
      "modelSpecific": true,
      "gitSounds": true,
      "agentSounds": true,
      "phaseSounds": true,
      "mobileSync": true,
      "edgeOptimization": true
    },
    "mobileIntegration": {
      "enabled": true,
      "tunnelProvider": "auto",
      "devices": {
        "samsung_galaxy_s25_edge": {
          "edgeLighting": true,
          "hapticFeedback": true,
          "adaptiveVolume": true,
          "bixbyIntegration": true
        }
      },
      "pushNotifications": {
        "enabled": true,
        "priority": "high",
        "categories": ["agent", "build", "deployment", "security", "error"]
      },
      "security": {
        "tokenAuth": true,
        "tlsEncryption": "1.3",
        "rateLimiting": true,
        "sessionTimeout": 3600
      }
    },
    "tunnelManagement": {
      "enabled": true,
      "providers": ["ngrok", "cloudflare", "localhost"],
      "defaultProvider": "ngrok",
      "autoReconnect": true,
      "healthChecks": true,
      "statusMonitoring": {
        "interval": 30,
        "timeout": 10,
        "retries": 3
      }
    },
    "parallelExecution": {
      "enabled": true,
      "maxConcurrentAgents": 4,
      "resourceThrottling": true,
      "priorityQueueing": true
    }
  },
  "features": {
    "audioFeedback": true,
    "bashCategorization": true,
    "venvEnforcement": true,
    "hierarchicalOrchestration": true,
    "typeLeaderCoordination": true,
    "mcpIntegration": true,
    "autoAcceptDetection": true,
    "mobileAccess": true,
    "tunnelConnectivity": true,
    "samsungGalaxyS25EdgeOptimization": true,
    "realTimeSync": true,
    "v3EnhancedOrchestration": true
  },
  "experimental": {
    "aiGeneratedAudio": true,
    "contextCompression": true,
    "predictiveAgentSelection": true,
    "adaptiveModelSwitching": true,
    "realTimeCollaboration": false
  },
  "performance": {
    "metrics": {
      "enabled": true,
      "collectAgentTiming": true,
      "collectResourceUsage": true,
      "reportingInterval": 300
    },
    "optimization": {
      "backgroundProcessing": true,
      "cacheWarmup": true,
      "memoryManagement": "adaptive",
      "networkOptimization": true
    }
  },
  "deployment": {
    "githubIntegration": {
      "enabled": true,
      "autoCommit": false,
      "autoRelease": false,
      "prCreation": true
    },
    "dockerSupport": {
      "enabled": true,
      "multiStage": true,
      "optimization": true
    }
  }
}