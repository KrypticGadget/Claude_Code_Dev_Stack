# Unified MCP Generator Configuration Examples

# ==============================================================================
# 1. MINIMAL CONFIGURATION
# ==============================================================================
# Basic configuration for quick starts
---
generator: auto
projectType: mcp-server
common:
  name: simple-mcp-server
  transport: stdio

# ==============================================================================
# 2. PYTHON MCP SERVER CONFIGURATION
# ==============================================================================
# Configuration optimized for Python MCP server development
---
generator: python
projectType: mcp-server

common:
  name: python-mcp-server
  description: Python-based MCP server with enhanced features
  version: 1.0.0
  author:
    name: Python Developer
    email: python.dev@example.com
  license: MIT
  transport: stdio
  baseUrl: https://api.example.com

python:
  pythonVersion: ">=3.11"
  enhanceDocstrings: true
  enhanceDocstringsOpenAPI: false
  generateAgent: false
  generateEval: false
  generateSystemPrompt: false
  withA2AProxy: false
  fileHeaders:
    copyright: "Copyright 2024 Example Corp"
    license: MIT
    message: "Generated by Unified MCP Generator"

validation:
  validateSpec: true
  validateOutput: false
  strict: false

# ==============================================================================
# 3. PYTHON MCP AGENT CONFIGURATION
# ==============================================================================
# Full-featured Python agent with LangGraph integration
---
generator: python
projectType: mcp-agent

common:
  name: intelligent-mcp-agent
  description: AI Agent with MCP tools and LangGraph integration
  version: 2.0.0
  author:
    name: AI Developer
    email: ai.dev@example.com
  license: Apache-2.0
  transport: web
  port: 8080
  environment:
    LANGCHAIN_API_KEY: your_langchain_key
    OPENAI_API_KEY: your_openai_key

python:
  pythonVersion: ">=3.11"
  enhanceDocstrings: true
  enhanceDocstringsOpenAPI: true
  generateAgent: true
  generateEval: true
  generateSystemPrompt: true
  withA2AProxy: true
  dependencies:
    - "langchain>=0.1.0"
    - "langgraph>=0.1.0"
    - "langsmith>=0.1.0"
  fileHeaders:
    copyright: "Copyright 2024 AI Corp"
    license: Apache-2.0

validation:
  validateSpec: true
  validateOutput: true
  strict: true

hooks:
  preGenerate:
    - echo "Starting AI agent generation..."
  postGenerate:
    - pip install -e .
    - python -m pytest tests/ -v
  postInstall:
    - python scripts/setup_agent.py

# ==============================================================================
# 4. NODE.JS MCP SERVER CONFIGURATION
# ==============================================================================
# TypeScript-based Node.js server with modern tooling
---
generator: nodejs
projectType: mcp-server

common:
  name: nodejs-mcp-server
  description: Modern TypeScript MCP server with full tooling
  version: 1.5.0
  author:
    name: Node.js Developer
    email: node.dev@example.com
  license: MIT
  transport: web
  port: 3000
  headers:
    X-API-Version: "2024-01"
    X-Generator: "unified-mcp-generator"

nodejs:
  nodeVersion: ">=18.0.0"
  packageManager: npm
  typescript: true
  eslint: true
  prettier: true
  jest: true
  dependencies:
    lodash: "^4.17.21"
    axios: "^1.6.0"
  devDependencies:
    "@types/lodash": "^4.14.200"

validation:
  validateSpec: true
  validateOutput: false
  strict: false

hooks:
  postGenerate:
    - npm install
    - npm run build
    - npm test

# ==============================================================================
# 5. STREAMABLE HTTP SERVER CONFIGURATION
# ==============================================================================
# Node.js server with streaming HTTP support
---
generator: nodejs
projectType: mcp-server

common:
  name: streaming-mcp-server
  description: High-performance streaming MCP server
  version: 1.0.0
  transport: streamable-http
  port: 9000
  author:
    name: Streaming Developer
    email: streaming@example.com

nodejs:
  nodeVersion: ">=20.0.0"
  packageManager: pnpm
  typescript: true
  eslint: true
  prettier: true
  jest: true

validation:
  validateSpec: true
  strict: true

# ==============================================================================
# 6. FULL-STACK PROJECT CONFIGURATION
# ==============================================================================
# Complete project with server, client, and documentation
---
generator: auto  # Will select best generator for full-stack
projectType: full-stack

common:
  name: complete-mcp-project
  description: Complete MCP project with server, client, and docs
  version: 3.0.0
  author:
    name: Full-Stack Developer
    email: fullstack@example.com
  license: BSD-3-Clause
  transport: web
  port: 4000
  baseUrl: https://api.mycompany.com
  excludeOperations:
    - deprecated_endpoint
    - internal_only_operation

python:
  pythonVersion: ">=3.11"
  enhanceDocstrings: true
  generateAgent: true
  generateEval: true

nodejs:
  nodeVersion: ">=18.0.0"
  typescript: true
  packageManager: yarn
  eslint: true
  prettier: true
  jest: true

validation:
  validateSpec: true
  validateOutput: true
  strict: true

hooks:
  preGenerate:
    - echo "Generating full-stack MCP project..."
    - mkdir -p docs logs
  postGenerate:
    - echo "Setting up development environment..."
  postInstall:
    - echo "Project setup complete!"

# ==============================================================================
# 7. DEVELOPMENT CONFIGURATION
# ==============================================================================
# Configuration for development with all debugging features
---
generator: python  # Prefer Python for development features
projectType: mcp-server

common:
  name: dev-mcp-server
  description: Development MCP server with debugging features
  version: 0.1.0-dev
  transport: web
  port: 5000
  environment:
    DEBUG: "true"
    LOG_LEVEL: debug
    ENABLE_CORS: "true"

python:
  pythonVersion: ">=3.11"
  enhanceDocstrings: true
  enhanceDocstringsOpenAPI: true
  generateAgent: false
  generateEval: true
  generateSystemPrompt: false
  withA2AProxy: false
  dependencies:
    - "pytest>=7.0.0"
    - "pytest-cov>=4.0.0"
    - "black>=23.0.0"
    - "flake8>=6.0.0"

validation:
  validateSpec: true
  validateOutput: true
  strict: true

hooks:
  preGenerate:
    - echo "Development build starting..."
  postGenerate:
    - pip install -e ".[dev]"
    - pre-commit install
    - python -m pytest tests/ --cov
  postInstall:
    - echo "Development environment ready!"

# ==============================================================================
# 8. PRODUCTION CONFIGURATION
# ==============================================================================
# Optimized configuration for production deployment
---
generator: auto
projectType: mcp-server

common:
  name: prod-mcp-server
  description: Production-ready MCP server
  version: 2.1.0
  author:
    name: Production Team
    email: production@example.com
  license: Commercial
  transport: stdio  # Most efficient for production
  environment:
    NODE_ENV: production
    LOG_LEVEL: info
    ENABLE_METRICS: "true"

python:
  pythonVersion: ">=3.11"
  enhanceDocstrings: false  # Skip for production builds
  enhanceDocstringsOpenAPI: false
  generateAgent: false
  generateEval: false
  generateSystemPrompt: false
  withA2AProxy: false

nodejs:
  nodeVersion: ">=18.0.0"
  packageManager: npm
  typescript: true
  eslint: false  # Skip linting in production builds
  prettier: false
  jest: false

validation:
  validateSpec: true
  validateOutput: false
  strict: false

hooks:
  postGenerate:
    - echo "Optimizing for production..."
  postInstall:
    - echo "Production build complete!"

# ==============================================================================
# 9. WEBSOCKET SERVER CONFIGURATION
# ==============================================================================
# Python server with WebSocket transport
---
generator: python  # WebSocket support is better in Python
projectType: mcp-server

common:
  name: websocket-mcp-server
  description: Real-time MCP server with WebSocket support
  version: 1.0.0
  transport: websocket
  port: 8765
  author:
    name: WebSocket Developer
    email: ws@example.com

python:
  pythonVersion: ">=3.11"
  withA2AProxy: true  # Enable for WebSocket features
  dependencies:
    - "websockets>=11.0.0"
    - "asyncio>=3.4.3"

validation:
  validateSpec: true
  strict: false

# ==============================================================================
# 10. CUSTOM TEMPLATE CONFIGURATION
# ==============================================================================
# Configuration for custom business logic integration
---
generator: auto
projectType: mcp-server

common:
  name: custom-business-mcp
  description: MCP server with custom business logic integration
  version: 1.0.0
  transport: web
  port: 7000
  headers:
    X-Business-Unit: "api-gateway"
    X-Environment: "staging"
  environment:
    DATABASE_URL: postgresql://localhost:5432/mydb
    REDIS_URL: redis://localhost:6379
    API_TIMEOUT: "30"

python:
  pythonVersion: ">=3.11"
  enhanceDocstrings: true
  dependencies:
    - "sqlalchemy>=2.0.0"
    - "redis>=5.0.0"
    - "pydantic>=2.0.0"

nodejs:
  nodeVersion: ">=18.0.0"
  typescript: true
  dependencies:
    pg: "^8.11.0"
    redis: "^4.6.0"
    zod: "^3.22.0"

validation:
  validateSpec: true
  validateOutput: true
  strict: true

hooks:
  preGenerate:
    - echo "Generating custom business MCP server..."
    - createdb mydb || echo "Database already exists"
  postGenerate:
    - echo "Setting up database schema..."
  postInstall:
    - echo "Running database migrations..."
    - echo "Custom MCP server ready for business logic!"