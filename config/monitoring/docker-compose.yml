# Docker Compose for Claude Code V3.6.9 Monitoring Infrastructure
version: '3.8'

services:
  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: claude-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    restart: unless-stopped
    networks:
      - monitoring

  # Grafana - Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: claude-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    restart: unless-stopped
    networks:
      - monitoring
    depends_on:
      - prometheus

  # Loki - Log Aggregation
  loki:
    image: grafana/loki:latest
    container_name: claude-loki
    ports:
      - "3100:3100"
    volumes:
      - ./loki:/etc/loki
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped
    networks:
      - monitoring

  # Promtail - Log Collection
  promtail:
    image: grafana/promtail:latest
    container_name: claude-promtail
    volumes:
      - ./logging:/etc/promtail
      - /var/log:/var/log:ro
      - /Users:/Users:ro  # For Windows/macOS
    command: -config.file=/etc/promtail/promtail_config.yml
    restart: unless-stopped
    networks:
      - monitoring
    depends_on:
      - loki

  # Alertmanager - Alert Management
  alertmanager:
    image: prom/alertmanager:latest
    container_name: claude-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./alerting:/etc/alertmanager
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    restart: unless-stopped
    networks:
      - monitoring

  # Node Exporter - System Metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: claude-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    networks:
      - monitoring

  # Claude Metrics Collector
  claude-metrics:
    build:
      context: .
      dockerfile: Dockerfile.metrics
    container_name: claude-metrics-collector
    ports:
      - "8001:8001"
    volumes:
      - /Users:/Users:ro  # For accessing Claude home directory
    environment:
      - CLAUDE_HOME=/Users/${USER}/.claude
      - METRICS_PORT=8001
    restart: unless-stopped
    networks:
      - monitoring

  # Custom Alert Webhook Handler
  alert-webhook:
    build:
      context: .
      dockerfile: Dockerfile.webhook
    container_name: claude-alert-webhook
    ports:
      - "8080:8080"
    environment:
      - WEBHOOK_PORT=8080
      - CLAUDE_NOTIFICATIONS_ENABLED=true
    restart: unless-stopped
    networks:
      - monitoring

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: claude-monitoring-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx:/etc/nginx/conf.d
      - ./ssl:/etc/ssl/certs
    restart: unless-stopped
    networks:
      - monitoring
    depends_on:
      - grafana
      - prometheus

networks:
  monitoring:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data:
  loki_data:
  alertmanager_data: